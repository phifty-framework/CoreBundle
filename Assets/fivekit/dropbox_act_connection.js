// Generated by CoffeeScript 1.6.3
/*

By detecting drag behavior to show a dropbox area
And trigger actions after uploading files.

    dropboxAction = new DropBoxActionConnect({
      container: $('.dropbox-container')
      detector: $(document.body)
      uploadAction: 'CoreBundle::Action::Html5Upload'
      resultAction: 'ImageData::Action::CreateImage'
      resultHandler: (resp) ->
        console.log resp.message
      # or use onUpload
      onUpload: (resp) ->
    })

Dropbox element structure:

    <div class="dropbox-container">
        <div class="dropbox-queue"> </div>
        <div class="dropbox">Drag files to here to upload.</div>
    </div>
*/


(function() {
  window.FiveKit.DropBoxActConnection = (function() {
    function DropBoxActConnection(options) {
      var $dropboxEl, $hint, $queueEl, self, _timer;
      this.options = options;
      this.container = this.options.container;
      this.detector = $(this.options.detector || document.body);
      this.uploadAction = this.options.uploadAction || 'CoreBundle::Action::Html5Upload';
      $queueEl = $('<div/>').addClass('dropbox-queue').appendTo(this.container);
      $dropboxEl = $('<div/>').addClass('dropbox').appendTo(this.container);
      $hint = $('<div/>').addClass('dropbox-hint').text('Drag files to here to upload').appendTo($dropboxEl);
      this.container.hide();
      self = this;
      _timer = null;
      this.detector.bind('dragenter', function(e) {
        return self.container.fadeIn();
      });
      this.dropbox = new FiveKit.DropBoxUploader({
        el: $dropboxEl,
        queueEl: $queueEl,
        action: this.uploadAction,
        onDragOut: function(e) {
          if (_timer) {
            clearTimeout(_timer);
          }
          return _timer = setTimeout((function() {
            return self.container.fadeOut('fast');
          }), 1000 * 3);
        },
        onTransferFinished: function(e) {
          return setTimeout((function() {
            self.container.fadeOut('slow');
            if (self.options.onTransferFinished) {
              return self.options.onTransferFinished.apply(this, e);
            }
          }), 900);
        },
        onTransferComplete: function(e, result) {
          if (self.options.onTransferComplete) {
            return self.options.onTransferComplete.call(this, result);
          } else if (self.options.resultAction && self.options.resultHandler) {
            return runAction(self.options.resultAction, result.data, self.options.resultHandler);
          }
        }
      });
    }

    return DropBoxActConnection;

  })();

}).call(this);
