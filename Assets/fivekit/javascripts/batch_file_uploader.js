// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (typeof window.FiveKit === "undefined") {
    window.FiveKit = {};
  }

  FiveKit.FileUploader = (function() {
    FileUploader.prototype.actionClass = "CoreBundle::Action::Html5Upload";

    function FileUploader(config) {
      this.config = config;
      if (this.config.action) {
        this.actionClass = this.config.action;
      }
      this.progressContainer = this.config.progressContainer;
    }

    FileUploader.prototype.upload = function(file) {
      return ActionCsrfToken.get({
        success: (function(_this) {
          return function(csrfToken) {
            var rs;
            rs = _this.uploadFile(csrfToken, file);
            if (_this.config.onTransferFinished) {
              return $.when.apply($, [rs]).done(_this.config.onTransferFinished);
            }
          };
        })(this)
      });
    };

    return FileUploader;

  })();


  /*
   * FileUploader uploads multiple files
   */

  FiveKit.BatchFileUploader = (function(superClass) {
    extend(BatchFileUploader, superClass);

    function BatchFileUploader() {
      return BatchFileUploader.__super__.constructor.apply(this, arguments);
    }

    BatchFileUploader.prototype.uploadFile = function(csrfToken, file) {
      var progressItem, self, xhr;
      self = this;
      if (this.progressContainer) {
        progressItem = new FiveKit.UploadProgressItem(file);
        progressItem.el.appendTo(this.progressContainer);
      }
      xhr = new FiveKit.Xhr({
        endpoint: this.config.endpoint,
        params: {
          __action: this.actionClass,
          __ajax_request: 1,
          __csrf_token: csrfToken.hash
        },
        onReadyStateChange: function(e) {
          if (window.console) {
            console.debug('onReadyStateChange', e);
          }
          if (self.config.onReadyStateChange) {
            return self.config.onReadyStateChange.call(this, e);
          }
        },
        onTransferStart: function(e) {
          if (window.console) {
            console.debug('onTransferStart', e);
          }
          if (self.config.onTransferStart) {
            return self.config.onTransferStart.call(this, e);
          }
        },
        onTransferProgress: function(e) {
          var position, total;
          if (window.console) {
            console.debug('onTransferProgress', e);
          }
          if (self.config.onTransferProgress) {
            self.config.onTransferProgress.call(this, e);
          }
          if (e.lengthComputable) {
            position = e.position || e.loaded;
            total = e.totalSize || e.total;
            if (window.console) {
              console.log('progressing', e, position, total);
            }
            if (progressItem) {
              return progressItem.update(position, total);
            }
          }
        },
        onTransferComplete: function(e, result) {
          return self.config.onTransferComplete.call(this, e, result, progressItem);
        }
      });
      return xhr.send(file);
    };

    BatchFileUploader.prototype.upload = function(files) {
      return ActionCsrfToken.get({
        success: (function(_this) {
          return function(csrfToken) {
            var file, fn, i, len, rs;
            rs = [];
            fn = function(file) {
              return rs.push(_this.uploadFile(csrfToken, file));
            };
            for (i = 0, len = files.length; i < len; i++) {
              file = files[i];
              fn(file);
            }
            if (_this.config.onTransferFinished) {
              return $.when.apply($, rs).done(_this.config.onTransferFinished);
            }
          };
        })(this)
      });
    };

    return BatchFileUploader;

  })(FiveKit.FileUploader);

}).call(this);
