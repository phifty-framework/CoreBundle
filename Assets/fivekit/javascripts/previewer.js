// Generated by CoffeeScript 1.9.3

/*
Dependencies: FiveKit.Dropbox,
              FiveKit.FileReader,
              jQuery.exif.js
 */

(function() {
  var $;

  $ = jQuery;

  if (!window.FiveKit) {
    window.FiveKit = {};
  }

  window.FiveKit.Previewer = (function() {
    function Previewer(options) {
      this.options = options;
      this.fileInput = $(this.options.el);
      this.fieldName = this.fileInput.attr('name');
      this.hiddenInput = this.createHiddenInput(this.fieldName);
      this.widgetContainer = this.fileInput.parents(".formkit-widget-thumbimagefile");
      this.widgetContainer.css({
        position: "relative"
      });
      this.cover = this.widgetContainer.find(".formkit-image-cover");
      this.coverImage = this.cover.find('img');
      this.coverImage.css({
        zIndex: 1
      });
      this.autoresizeCheckbox = this.widgetContainer.find('.autoresize-checkbox');
      this.autoresizeTypeSelector = this.widgetContainer.find('.autoresize-type-selector');
      this.initialize();
    }

    Previewer.prototype.initialize = function() {
      var $dropzone, d, defaultDimension;
      this.fileInput.on("change", (function(_this) {
        return function(e) {
          var ref;
          _this.use("file");
          if ((ref = e.target.files) != null ? ref[0] : void 0) {
            return _this.renderPreviewImage(e.target.files[0]);
          }
        };
      })(this));
      this.fileInput.after(this.hiddenInput);
      d = this.getImageDimension();
      $dropzone = $('<div/>').addClass('image-dropzone').css({
        position: 'absolute',
        zIndex: 2
      });
      this.cover.before($dropzone);
      defaultDimension = {
        width: 240,
        height: 120
      };
      this.widgetContainer.css({
        display: 'inline-block'
      });
      this.updateCover(d);
      if (d && d.width && d.height) {
        this.cover.css(this.scalePreviewDimension(d));
        $dropzone.css(this.scalePreviewDimension(d));
      } else {
        this.cover.css(defaultDimension);
        $dropzone.css(defaultDimension);
      }
      return this.initDropbox($dropzone);
    };

    Previewer.prototype.updateCover = function(d) {
      if (!this.coverImage.get(0)) {
        return this.insertImageHolder(d);
      } else {
        if (d) {
          this.scaleCoverImageByDefault(d);
        }
        return this.initCoverController();
      }
    };

    Previewer.prototype.scalePreviewDimension = function(d) {
      var r;
      if (d.width > 350) {
        r = 350 / d.width;
        d.width *= r;
        d.height *= r;
      }
      if (d.height > 300) {
        r = 300 / d.height;
        d.width *= r;
        d.height *= r;
      }
      return d;
    };

    Previewer.prototype.insertImageHolder = function(d) {
      var $imageholder, holdertheme, text;
      if (window.navigator.userAgent.match(/MSIE 8/)) {
        return;
      }
      holdertheme = "auto";
      if (d && d.width && d.height) {
        $imageholder = $('<img/>').attr("data-src", ["holder.js", d.width + "x" + d.height, holdertheme].join("/"));
        d = this.scalePreviewDimension(d);
        $imageholder.css(d);
      } else if (d && (d.width || d.height)) {
        text = d && d.width ? d.width : "Any";
        text += " x ";
        text += d && d.height ? d.height : "Any";
        $imageholder = $('<img/>').attr("data-src", ["holder.js", "240x120", "text:" + text, holdertheme].join("/"));
        $imageholder.css({
          width: 240,
          height: 120
        });
      } else {
        $imageholder = $('<img/>').attr("data-src", ["holder.js", "240x120", "text:Any Size", holdertheme].join("/"));
        $imageholder.css({
          width: 240,
          height: 120
        });
      }
      this.cover.append($imageholder);
      if (typeof Holder !== "undefined") {
        return Holder.run({
          images: $imageholder.get(0)
        });
      } else {
        return console.warn("Holder js is not installed.");
      }
    };

    Previewer.prototype.getImageDimension = function() {
      var d;
      d = {};
      if (this.fileInput.data('width')) {
        d.width = this.fileInput.data('width');
      }
      if (this.fileInput.data('height')) {
        d.height = this.fileInput.data('height');
      }
      return d;
    };

    Previewer.prototype.removeCoverImage = function() {
      return this.cover.empty();
    };

    Previewer.prototype.createHiddenInput = function(name) {
      var $input;
      $input = $('<input type="hidden" class="formkit-widget-thumbimagefile-hidden">');
      return $input;
    };

    Previewer.prototype.initDropbox = function(dropzone) {
      var progressBarContainer, uploader;
      progressBarContainer = $('<div/>').addClass("upload-progress clearfix").css({
        marginTop: 5
      });
      progressBarContainer.hide();
      this.widgetContainer.after(progressBarContainer);
      return uploader = new FiveKit.DropBoxUploader({
        el: dropzone,
        queueEl: progressBarContainer,
        onDrop: (function(_this) {
          return function(e) {
            var ref;
            progressBarContainer.empty().show();
            if (((ref = e.dataTransfer.files) != null ? ref[0] : void 0)) {
              return _this.renderPreviewImage(e.dataTransfer.files[0]);
            }
          };
        })(this),
        onTransferComplete: (function(_this) {
          return function(e, result, progressItem) {
            var ref, ref1;
            _this.use('hidden');
            if ((result.success != null) && ((ref = result.data) != null ? ref.file : void 0)) {
              _this.renderUploadImage((ref1 = result.data) != null ? ref1.file : void 0);
              return setTimeout((function() {
                return progressBarContainer.fadeOut();
              }), 2000);
            } else if (result.error) {
              _this.removeCoverImage();
              _this.insertImageHolder(_this.getImageDimension());
              return progressItem.setError((result != null ? result.message : void 0) || "Upload Error");
            }
          };
        })(this)
      });
    };

    Previewer.prototype.use = function(type) {
      if (type === 'hidden') {
        this.hiddenInput.attr('name', this.fieldName);
        this.fileInput.attr('name', '');
        return this.fileInput.hide();
      } else if (type === 'file') {
        this.fileInput.attr('name', this.fieldName);
        this.fileInput.show();
        return this.hiddenInput.attr('name', '');
      }
    };

    Previewer.prototype.scaleCoverImageByMaxWidth = function(d) {
      if (this.coverImage.width() > d.width) {
        return this.coverImage.css({
          width: '100%',
          height: 'auto'
        });
      }
    };

    Previewer.prototype.scaleCoverImageByMaxHeight = function(d) {
      if (this.coverImage.height() > d.height) {
        return this.coverImage.css({
          height: '100%',
          width: 'auto'
        });
      }
    };

    Previewer.prototype.scaleCoverImageByFullScale = function(d) {
      return $(img).css({
        height: '100%',
        width: '100%'
      });
    };

    Previewer.prototype.scaleCoverImageByDefault = function(d) {
      if (d && this.coverImage.get(0)) {
        d = this.scalePreviewDimension(d);
        return this.coverImage.css(d);
      }
    };

    Previewer.prototype.renderCoverImage = function(src) {
      var d, self;
      this.removeCoverImage();
      self = this;
      d = this.getImageDimension();
      this.coverImage = $('<img/>').appendTo(this.cover);
      this.coverImage.hide();
      this.coverImage.on('load', function() {
        $(this).exifLoad();
        if (d) {
          self.scaleCoverImageByDefault(d);
        }
        return $(this).fadeIn();
      });
      this.coverImage.attr('src', src);
      this.initCoverController();
      return this.coverImage;
    };

    Previewer.prototype.initCoverController = function() {
      var exifButton, exifData, removeButton;
      removeButton = $(document.createElement('div')).addClass('remove').css({
        'zIndex': 1000,
        'position': 'absolute',
        'top': 3,
        'right': 7,
        'color': '#ffffff'
      });
      removeButton.append($('<div/>').addClass('fa fa-times-circle'));
      removeButton.on('click', (function(_this) {
        return function(e) {
          e.stopPropagation();
          _this.removeCoverImage();
          _this.use("file");
          _this.insertImageHolder(_this.getImageDimension());
          return false;
        };
      })(this));
      this.cover.append(removeButton);
      if (this.fileInput.data('exif')) {
        exifButton = $('<div/>').addClass('exif').css('zIndex', 1000).appendTo(this.cover);
        exifButton.on('click', function(e) {});
        exifData = $(this).exifPretty();
        if ($.isEmptyObject(exifData) || !exifData) {
          exifData = "No EXIF information";
        }
        return alert(exifData);
      }
    };

    Previewer.prototype.renderUploadImage = function(src) {
      this.renderCoverImage("/" + src);
      return this.hiddenInput.val(src);
    };

    Previewer.prototype.renderPreviewImage = function(file) {
      var filereader;
      filereader = new FiveKit.FileReader({
        onLoaded: (function(_this) {
          return function(e) {

            /*
            image = new Image
            image.onload = (imageEvent) ->
              canvas = document.createElement('canvas')
              max_size = 544
              width = image.width
              height = image.height
              canvas.width = width
              canvas.height = height
            image.src = e.target.result
             */
            _this.renderCoverImage(e.target.result);
            return _this.fileInput.hide();
          };
        })(this)
      });
      return filereader.read(file);
    };

    return Previewer;

  })();

  FormKit.register(function(e, scopeEl) {
    return $(scopeEl).find('.formkit-widget-thumbimagefile input[data-droppreview=true]').each(function(i, fileInput) {
      var previewer;
      console.info("init previewer at ", fileInput);
      return previewer = new FiveKit.Previewer({
        el: $(fileInput)
      });
    });
  });

}).call(this);
