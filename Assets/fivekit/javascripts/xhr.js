// Generated by CoffeeScript 1.9.3

/*

	new Xhr({ 
    endpoint: '/html5/upload'
    params: {  }
    onReadyStateChange: (e) ->
  })
 */

(function() {
  if (!window.FiveKit) {
    window.FiveKit = {};
  }

  window.FiveKit.Xhr = (function() {
    function Xhr(options) {
      this.options = options;
      if (this.options.params) {
        this.query = $.param(this.options.params);
      } else if (this.options.form) {
        this.query = $(this.options.form).serialize();
      } else if (this.options.query) {
        this.query = this.options.query;
      }
    }

    Xhr.prototype.send = function(file) {
      var dfd, fd, mimeBuilder, self;
      self = this;
      this.xhr = new XMLHttpRequest;
      if (this.options.onTransferStart) {
        this.xhr.upload.addEventListener('loadstart', this.options.onTransferStart);
      }
      if (this.options.onTransferEnd) {
        this.xhr.upload.addEventListener('loadend', this.options.onTransferEnd);
      }
      if (this.options.onTransferProgress) {
        this.xhr.upload.addEventListener('progress', this.options.onTransferProgress);
      }
      dfd = $.Deferred();
      if (this.options.onTransferComplete) {
        this.xhr.addEventListener('load', function(e) {
          var result, target;
          target = e.srcElement || e.target;
          if (window.console) {
            console.debug(target.responseText);
          }
          result = JSON.parse(target.responseText);
          if (result.error) {
            if (window.console) {
              console.error('Action result', result);
            }
          } else {
            if (window.console) {
              console.debug('Action result', result);
            }
          }
          self.options.onTransferComplete.call(this, e, result);
          return dfd.resolve(e, result);
        });
      }
      if (this.options.onTransferFailed) {
        this.xhr.addEventListener('error', this.options.onTransferFailed, false);
      }
      if (this.options.onTransferCanceled) {
        this.xhr.addEventListener('abort', this.options.onTransferCanceled, false);
      }
      if (this.options.onReadyStateChange) {
        this.xhr.onreadystatechange = this.options.onReadyStateChange;
      }
      this.xhr.open('POST', this.options.endpoint + '?' + this.query, true);
      if (typeof FormData !== "undefined") {
        if (window.console) {
          console.info("Sending file using FormData...", file);
        }
        this.xhr.setRequestHeader("X-UPLOAD-FILENAME", encodeURIComponent(file.name));
        this.xhr.setRequestHeader("X-UPLOAD-SIZE", file.size);
        this.xhr.setRequestHeader("X-UPLOAD-TYPE", file.type);
        this.xhr.setRequestHeader("X-UPLOAD-MODIFIED-DATE", encodeURIComponent(file.lastModifiedDate.toISOString()));
        fd = new FormData;
        fd.append("upload", file);
        this.xhr.send(fd);
      } else if (this.xhr.sendAsBinary) {
        if (window.console) {
          console.info('Sending file using sendAsBinary', file);
        }
        mimeBuilder = new FiveKit.MimeBuilder;
        mimeBuilder.build({
          file: file,
          onBuilt: (function(_this) {
            return function(b) {
              console.log("body", b);
              return _this.xhr.sendAsBinary(b.body);
            };
          })(this)
        });
      }
      return dfd;
    };

    return Xhr;

  })();

}).call(this);
